unit u_generation;

interface

procedure Generer_Page(nom_modele: string; Fic_Resultat: string;
  num_photo: integer);

implementation

uses
  SysUtils, Classes, u_param, u_generationutilitaire;

function Cumuler_Lignes(Nom_Fichier: string): string;
var
  ch: string;
  Memo: TStringList;
begin
  ch := '';
  Memo := TStringList.Create;
  try
    try
      Memo.LoadFromFile(Nom_Fichier);
    except
      Memo.Clear;
    end;
    while (Memo.Count > 0) do
    begin
      ch := ch + #10#13 + Memo[0];
      Memo.Delete(0);
    end;
    { endwhile }
  finally
    result := ch;
  end;
end;

function remplacer_marqueur(var ch: string; num_photo: integer;
  marqueur: string): boolean;
var
  n: integer;
  res: string;
  NomImage: string;
begin
  result := false;
  n := pos(marqueur, ch);
  if (n > 0) then
  begin
    NomImage := Param_Album.ReadString('photos',
      'Image' + IntToStr(num_photo), '');
    result := true;
    Delete(ch, n, length(marqueur));
    if (marqueur = '!$datgen$!') then
      res := DateToStr(Date);
    { endif }
    if (marqueur = '!$timgen$!') then
      res := TimeToStr(Time);
    { endif }
    if (marqueur = '!$titre$!') then
      res := Param_Album.ReadString('album', 'titre', '');
    { endif }
    if (marqueur = '!$commentateur$!') then
      res := Param_Album.ReadString('album', 'commentateur', '');
    { endif }
    if (marqueur = '!$photographe$!') then
      res := Param_Album.ReadString('album', 'photographe', '');
    { endif }
    if (marqueur = '!$nom_page_suivante$!') then
      if (num_photo >= Param_Album.ReadInteger('photos', 'nb_photos', 0)) then
        res := 'credit.html'
      else
        res := 'page' + IntToStr(Succ(num_photo)) + '.html';
    { endif }
    { endif }
    if (marqueur = '!$nom_page_precedente$!') then
      if (num_photo <= 1) then
        res := 'browser.html'
      else
        res := 'page' + IntToStr(Pred(num_photo)) + '.html';
    { endif }
    { endif }
    if (marqueur = '!$nom_page_premiere$!') then
      res := 'page' + IntToStr(1) + '.html';
    { endif }
    if (marqueur = '!$nom_page_derniere$!') then
      res := 'page' + IntToStr(Param_Album.ReadInteger('photos', 'nb_photos', 0)
        ) + '.html';
    { endif }
    if (marqueur = '!$nom_page$!') then
      res := 'page' + IntToStr(num_photo) + '.html';
    { endif }
    if (marqueur = '!$nom_photo$!') then
      res := NomImage;
    { endif }
    if (marqueur = '!$coul_texte$!') then
      if (Param_Album.ReadString('album', 'fond', '') = 'noir') then
        res := '#FFFFFF'
      else
        res := '#000000';
    { endif }
    { endif }
    if (marqueur = '!$coul_fond$!') then
      if (Param_Album.ReadString('album', 'fond', '') = 'noir') then
        res := '#000000'
      else
        res := '#FFFFFF';
    { endif }
    { endif }
    if (marqueur = '!$commentaire$!') then
      res := Cumuler_Lignes(Album_Path + 'comment\' + Param_Album.ReadString
        ('commentaires', Param_Album.ReadString('photos',
        'Image' + IntToStr(num_photo), ''), '0') + '.txt');
    { endif }
    if (marqueur = '!$commentaire_accueil$!') then
      res := Cumuler_Lignes(Album_Path + 'comment\root.txt');
    { endif }
    if (marqueur = '!$photo_larg$!') then
      res := Param_Album.ReadString('taille photo', NomImage + ' larg', '0');
    { endif }
    if (marqueur = '!$photo_haut$!') then
      res := Param_Album.ReadString('taille photo', NomImage + ' haut', '0');
    { endif }
    if (marqueur = '!$photo_larg_red$!') then
      res := Param_Album.ReadString('taille photo',
        NomImage + ' larg red', '0');
    { endif }
    if (marqueur = '!$photo_haut_red$!') then
      res := Param_Album.ReadString('taille photo',
        NomImage + ' haut red', '0');
    { endif }
    if (marqueur = '!$copyright$!') then
      res := 'Page generated by PhotoAlbumGenerator from Patrick Prémartin on the '
        + DateToStr(Now);
    { endif }
    ch := copy(ch, 1, Pred(n)) + Changer_Accents(res) +
      copy(ch, n, Succ(length(ch) - n));
  end;
  { endif }
end; { Remplacer_Marqueur }

function modification_marqueur(var ch: string; num_photo: integer): boolean;
var
  n: integer;
begin
  result := false;

  // Ajout d'un copyright sur les pages générées en modifiant leur entête
  n := pos('<HEAD>', UpperCase(ch));
  if (n > 0) then
  begin
    result := true;
    Delete(ch, n, length('<HEAD>'));
    // attention, le blanc derrière HEAD dans le résultat permet d'éviter de boucler indéfiniement !
    ch := copy(ch, 1, Pred(n)) + '<head >'#10#13 +
      '<meta name="generator" content="GenSitePAG">'#10#13 +
      '<meta name="generation-date" content="' + DateTimeToStr(Now) + '">'#10#13
      + copy(ch, n, Succ(length(ch) - n));
  end;
  { endif }

  // Ajout d'un copyright en fin de chaque page générée
  n := pos('</BODY>', UpperCase(ch));
  if (n > 0) then
  begin
    result := true;
    Delete(ch, n, length('</BODY>'));
    // attention, le blanc derrière /BODY dans le résultat permet d'éviter de boucler indéfiniement !
    ch := copy(ch, 1, Pred(n)) +
      '<small><small><address>Page generated by <a href="https://github.com/DeveloppeurPascal/photo-album-generator" target="_top">PhotoAlbumGenerator</a> from <a href="https://github.com/DeveloppeurPascal">Patrick Prémartin</a> on the '
      + DateToStr(Now) + '.</address></small></small>'#10#13 + '</body >'#10#13
      + copy(ch, n, Succ(length(ch) - n));
  end;
  { endif }

  result := result or remplacer_marqueur(ch, num_photo, '!$titre$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$photographe$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$commentaire$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$commentateur$!');
  result := result or remplacer_marqueur(ch, num_photo,
    '!$nom_page_suivante$!');
  result := result or remplacer_marqueur(ch, num_photo,
    '!$nom_page_precedente$!');
  result := result or remplacer_marqueur(ch, num_photo,
    '!$commentaire_accueil$!');
  result := result or remplacer_marqueur(ch, num_photo,
    '!$nom_page_premiere$!');
  result := result or remplacer_marqueur(ch, num_photo,
    '!$nom_page_derniere$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$nom_page$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$nom_photo$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$copyright$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$coul_texte$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$coul_fond$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$photo_larg$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$photo_haut$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$photo_larg_red$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$photo_haut_red$!');

  // les autres zones utilisées
  result := result or remplacer_marqueur(ch, num_photo, '!$datgen$!');
  result := result or remplacer_marqueur(ch, num_photo, '!$timgen$!');
end; { modification_marqueur }

procedure Stocker_Cles(var lst_photo: TStringList; num_photo: integer);
begin
  lst_photo.Add(IntToStr(num_photo));
end;

procedure Restaurer_Cles(var lst_photo: TStringList; var num_photo: integer);
begin
  num_photo := StrToInt(lst_photo[Pred(lst_photo.Count)]);
  lst_photo.Delete(Pred(lst_photo.Count));
end;

procedure Retour_Page_Web(modele: string; var Resultat: TStringList;
  num_photo: integer);
var
  ch, upcase_ch: string;
  mdl, lst_if, lst_liste, lst_photo: TStringList;
  no_debut_boucle: longint;
  i: longint;
  reboucler: boolean;
begin
  Resultat := TStringList.Create;
  try
    if (not FileExists(modele)) then
    // si le fichier de modèle n'existe pas, on signale une erreur
      raise Exception.Create('Fichier modèle ' + modele + ' inexistant !');
    { endif }
    mdl := TStringList.Create; // contiendra le modèle à appliquer
    lst_if := TStringList.Create;
    // contiendra les éventuels conditionnements des blocs du programme
    lst_liste := TStringList.Create;
    // stockage des indices en cas de listes imbriquées
    lst_photo := TStringList.Create;
    // stockage des indices en cas de listes imbriquées
    try
      mdl.LoadFromFile(modele); // chargement du fichier de modèle
      no_debut_boucle := -1;
      i := 0;
      while (i < mdl.Count) do // on parcourt toutes les lignes du modèle
      begin
        reboucler := false;
        if (i <= mdl.Count) then
          ch := mdl[i]
        else
          ch := '';
        upcase_ch := UpperCase(ch);
        if ((not reboucler) and (pos('!$IF', upcase_ch) > 0) and
          (pos('!$/IF', upcase_ch) = 0)) then
        // une condition est détectée, on va la vérifier
        begin
          reboucler := true;
          // gérer ici les éventuels conditionnements de parties du modèle des pages
          if (false = true)
          // (pos ('!$IF LIVRE_EN_VENTE$!', upcase_ch) > 0) and (dm_donnees.Tab_Albums.FieldByName ('Code_Vendeur').AsInteger > 0))
          then // la condition est vérifiée, on tient compte des lignes suivantes
            lst_if.Add('O')
          else // la condition n'est pas vérifiée, on ignore les lignes suivantes
            lst_if.Add('N');
          { endif }
        end;
        { endif }
        if ((not reboucler) and (pos('!$ELSE$!', upcase_ch) > 0))
        // on inverse une condition
        then
        begin
          reboucler := true;
          if (lst_if.Count > 0) then
            if (lst_if[Pred(lst_if.Count)] = 'O') then
              lst_if[Pred(lst_if.Count)] := 'N'
            else
              lst_if[Pred(lst_if.Count)] := 'O';
          { endif }
          { endif }
        end;
        { endif }
        if ((not reboucler) and (pos('!$/IF$!', upcase_ch) > 0))
        // on dépile une condition
        then
        begin
          reboucler := true;
          if (lst_if.Count > 0) then
            lst_if.Delete(Pred(lst_if.Count));
        end;
        { endif }

        // liste des photographies
        if ((not reboucler) and (pos('!$LISTE_PHOTO$!', upcase_ch) > 0))
        // and (No_Debut_Boucle = -1)))
        then
        begin
          reboucler := true;
          if (no_debut_boucle >= 0) then
            lst_liste.Add(IntToStr(no_debut_boucle));
          // stockage de la valeur précédente
          { endif }
          no_debut_boucle := Succ(i);
          Stocker_Cles(lst_photo, num_photo);
          num_photo := 1;
        end;
        { endif }
        if ((not reboucler) and ((pos('!$/LISTE_PHOTO$!', upcase_ch) > 0) and
          (no_debut_boucle > -1))) then
        begin
          reboucler := true;
          inc(num_photo);
          if (num_photo > Param_Album.ReadInteger('photos', 'nb_photos', 0))
          then
          begin
            Restaurer_Cles(lst_photo, num_photo);
            if (lst_liste.Count > 0) then
            begin
              no_debut_boucle := StrToInt(lst_liste[Pred(lst_liste.Count)]);
              lst_liste.Delete(Pred(lst_liste.Count));
            end
            else
              no_debut_boucle := -1;
            { endif }
          end
          else
            i := no_debut_boucle - 1;
          // le -1 est là car on réincrémente I après !
          { endif }
        end;
        { endif }

        // prise en compte des marqueurs
        if (((lst_if.Count = 0) or (lst_if[Pred(lst_if.Count)] = 'O')) and
          (not reboucler)) then
        begin
          while modification_marqueur(ch, num_photo) do;
          // remplacement des mots-clés reconnus par leur valeur
          Resultat.Add(ch); // ajout de la chaîne au résultat final
        end;
        { endif }
        inc(i); // passage à la ligne suivante du modèle
      end;
      { endwhile }
    finally
      lst_photo.Free;
      lst_liste.Free;
      lst_if.Free;
      mdl.Free;
    end;
  finally
  end;
end; { Retour_Page_Web }

procedure Generer_Page(nom_modele: string; Fic_Resultat: string;
  num_photo: integer);
var
  Resultat: TStringList;
begin
  try
    Retour_Page_Web(nom_modele, Resultat, num_photo);
    Resultat.SaveToFile(Fic_Resultat);
  finally
    Resultat.Free;
  end;
end;

end.
